# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:
  push:
    branches: [ "main" ]
    paths: 
       - '**/Si_*/**'
       - '!*.md'
  pull_request:
    branches: [ "main" ]
    
env:
  BUILD_TYPE: Release
  
jobs:

  fanout:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Generate matrix with all modules of the repo
        id: set-matrix
        run: |
          echo "matrix=$(ls -l | grep '^d' | awk -F ' ' '{print $9}' | grep -Po 'Si.*' | jq -R -s -c 'split("\n") | map(select(length > 0))')" >> "$GITHUB_OUTPUT"
          
      - name: Generate the commit number
        id: commit-number
        run: |
          echo "comnum=$(git log --oneline | wc -l)" >> "$GITHUB_OUTPUT"
          
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      comnum: ${{ steps.commit-number.outputs.comnum }}

  build:
    needs: fanout
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        path: ${{ fromJson(needs.fanout.outputs.matrix) }}
    steps:
    - name: Prepare environment sha
      shell: bash
      run: echo "GITHUB_SHA_SHORT=${GITHUB_SHA::7}" >> $GITHUB_ENV
      
    - name: Prepare environment pwd
      shell: bash
      run: echo "START_DIR=`pwd`" >> $GITHUB_ENV
      
    - uses: actions/checkout@v3
    
    - name: Setup .NET 6
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
        
    - name: Restore dependencies
      run: |
        cd ${{ matrix.path }}
        dotnet restore
        
    - name: Build
      run: |
        cd ${{ matrix.path }}
        dotnet build --no-restore -c Release
        
    - name: Make output paths
      run: |
        cd ${{ env.START_DIR }}
        mkdir -p dedi/Mods
        mkdir -p listen/Mods
        cp ${{ env.START_DIR }}/${{ matrix.path }}/bin/${{env.BUILD_TYPE}}/netstandard2.1/*.dll dedi/Mods
        cp ${{ env.START_DIR }}/${{ matrix.path }}/bin/${{env.BUILD_TYPE}}/net6.0/*.dll listen/Mods
        
    - uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.path }}-build-${{ env.GITHUB_SHA_SHORT }}
        path: ${{ matrix.path }}/bin/${{env.BUILD_TYPE}}/**/*.dll
        
    - uses: actions/upload-artifact@v3
      with:
        name: dedicated-server-${{ env.GITHUB_SHA_SHORT }}
        path: ${{ env.START_DIR }}/dedi
        
    - uses: actions/upload-artifact@v3
      with:
        name: listen-server-${{ env.GITHUB_SHA_SHORT }}
        path: ${{ env.START_DIR }}/listen
        
  publish:
    if: github.event_name == 'push'
    permissions:
      contents: write
    needs: [ build, fanout ]
    runs-on: ubuntu-latest
    steps:
      - name: Prepare env
        shell: bash
        run: echo "GITHUB_SHA_SHORT=${GITHUB_SHA::7}" >> $GITHUB_ENV
        
      - name: Make output paths
        run: |
          mkdir -p release/dedi
          mkdir -p release/listen
          
      - uses: actions/download-artifact@v3
        with:
          name: dedicated-server-${{ env.GITHUB_SHA_SHORT }}
          path: release/dedi

      - uses: actions/download-artifact@v3
        with:
          name: listen-server-${{ env.GITHUB_SHA_SHORT }}
          path: release/listen

      - name: Zip Builds
        run: |
          (cd release/dedi && zip -qq -r ../../DedicatedServer-v${{ needs.fanout.outputs.comnum }}-${{ env.GITHUB_SHA_SHORT }}.zip *)
          (cd release/listen && zip -qq -r ../../ListenServer-v${{ needs.fanout.outputs.comnum }}-${{ env.GITHUB_SHA_SHORT }}.zip *)

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.fanout.outputs.comnum }}
          files: |
            DedicatedServer-v${{ needs.fanout.outputs.comnum }}-${{ env.GITHUB_SHA_SHORT }}.zip
            ListenServer-v${{ needs.fanout.outputs.comnum }}-${{ env.GITHUB_SHA_SHORT }}.zip
